syntax = "proto3";

package api.v1;

// All linear distances are in metres (SI).
// All coordinate frames are Earth-Centered, Earth-Fixed (ECEF), EPSG:4978.
// All timestamps are Unix epoch milliseconds (UTC).
// All durations are in milliseconds.
// Trace context: All RPCs MUST propagate W3C traceparent/tracestate in gRPC metadata.
// Schema version fields MUST be 1 unless otherwise negotiated.

// A 3D vector in meters, ECEF frame (EPSG:4978).
message Vec3m {
  double x = 1;
  double y = 2;
  double z = 3;
}

// A 3D vector in meters per second, ECEF frame (EPSG:4978).
message Vec3mps {
  double x = 1;
  double y = 2;
  double z = 3;
}

// An orientation represented as a unit-norm quaternion in the ECEF frame (EPSG:4978).
// Invariants: ||q|| = 1 ± 1e-6, w ≥ 0 (canonical hemisphere).
message UnitQuaternion {
  double w = 1;
  double x = 2;
  double y = 3;
  double z = 4;
}

// The operational mode of an agent.
enum AgentMode {
  AWAITING_TASK = 0;
  PLANNING = 1;
  NAVIGATING = 2;
  PERCEIVING = 3;
  DISCONNECTED = 4;
}

// A snapshot of a single agent's state.
message AgentState {
  uint64 agent_id = 1;
  // Time the pose was sampled.
  int64 timestamp_ms = 2;
  Vec3m position_ecef_m = 3;
  Vec3mps velocity_ecef_mps = 4;
  UnitQuaternion orientation_ecef = 5;
  AgentMode mode = 6;
  // A monotonic sequence number, incremented by the agent for each state update.
  // Wraps modulo 2^32; receivers MUST handle unsigned wraparound.
  uint32 sequence = 7;
  // The version of this schema. MUST be 1.
  uint32 schema_version = 255;
}

// A task assigned by the orchestrator to an agent.
message Task {
  Vec3m target_waypoint_ecef_m = 1;
}

// === RegisterAgent RPC ===
message RegisterAgentRequest {
  // A UUIDv4 generated by the agent on startup, unique to its process lifetime.
  string session_id = 1;
  // A freeform string identifying the agent's software version.
  string sw_version = 2;
  // A freeform string identifying the agent's hardware profile.
  string hw_profile = 3;
}
message RegisterAgentResponse {
  // The unique, monotonic ID assigned by the orchestrator for this agent.
  uint64 agent_id = 1;
  // The server's current time, for clock synchronization hints.
  int64 server_time_ms = 2;
  // The desired interval for the agent to send AgentReport messages.
  uint32 report_interval_ms = 3;
  // The maximum size in bytes for a single AgentReport message.
  uint32 max_report_bytes = 4;
  // The version of this schema. MUST be 1.
  uint32 schema_version = 255;
}

// === ReportState RPC ===
message AgentReport {
  uint64 agent_id = 1;
  // Time the report was enqueued for send.
  int64 timestamp_ms = 2;
  // The agent's full state at the time of this report.
  AgentState state = 3;
  // The result of serializing a RoaringBitmap (portable format) for points
  // discovered since the last successful report.
  bytes discovered_point_ids_portable = 4;
}
message ReportStateResponse {
  // The orchestrator can assign a new task to the agent in this response.
  optional Task assigned_task = 1;
  // The version of this schema. MUST be 1.
  uint32 schema_version = 255;
}

// === SubscribeWorldState RPC ===
message SubscribeWorldStateRequest {
  // If true, the server will immediately send the current state upon subscription.
  bool include_initial_snapshot = 1;
  // The version of this schema. MUST be 1.
  uint32 schema_version = 255;
}
message WorldState {
  // Unix timestamp in milliseconds (UTC).
  int64 timestamp_ms = 1;
  repeated AgentState agents = 2;
  // An opaque ticket to be used in an Arrow Flight DoGet call
  // to retrieve the full reveal mask corresponding to this state.
  // This is NOT a UTF-8 string and must be treated as raw bytes.
  bytes reveal_mask_ticket = 3;
  // The ratio of revealed points to total points, from 0.0 to 1.0.
  double map_coverage_ratio = 4;
  // The version of this schema. MUST be 1.
  uint32 schema_version = 255;
}

// === IssueCommand RPC ===
message IssueCommandRequest {
  oneof command {
    StartSurveyCommand start_survey = 1;
    ResetSimulationCommand reset_simulation = 2;
  }
  // The version of this schema. MUST be 1.
  uint32 schema_version = 255;
}
message StartSurveyCommand {}
message ResetSimulationCommand {}

message IssueCommandResponse {
  bool acknowledged = 1;
  string message = 2; // e.g., "Command acknowledged" or an error message.
  // The version of this schema. MUST be 1.
  uint32 schema_version = 255;
}

// The main C2 Service Definition, exposed by the sim_orchestrator.
service SimulationC2 {
  // Called by a sim_agent on startup to join the simulation.
  rpc RegisterAgent(RegisterAgentRequest) returns (RegisterAgentResponse);

  // A long-lived, bidirectional RPC for a sim_agent to report its state
  // and discoveries, and for the orchestrator to send back tasks.
  rpc ReportState(stream AgentReport) returns (stream ReportStateResponse);

  // A long-lived, server-streaming RPC for a viewer to receive updates
  // on the state of the world.
  rpc SubscribeWorldState(SubscribeWorldStateRequest) returns (stream WorldState);

  // A unary RPC for a viewer to send commands to the simulation.
  rpc IssueCommand(IssueCommandRequest) returns (IssueCommandResponse);
}
